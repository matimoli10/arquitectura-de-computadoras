1) Simular el siguiente programa de suma de números en punto flotante y analizar minuciosamente la ejecución paso a
paso. Inhabilitar Delay Slot y mantener habilitado Forwarding.

 .data
n1: .double 9.13
n2: .double 6.58
res1: .double 0.0
res2: .double 0.0
 .code
 l.d f1, n1(r0)
 l.d f2, n2(r0)
 add.d f3, f2, f1
 mul.d f4, f2, f1
 s.d f3, res1(r0)
 s.d f4, res2(r0)
 halt
 
a) Tomar nota de la cantidad de ciclos, instrucciones y CPI luego de la ejecución del programa.
b) ¿Cuántos atascos por dependencia de datos se generan? Observar en cada caso cuál es el dato en conflicto y las
instrucciones involucradas.
c) ¿Por qué se producen los atascos estructurales? Observar cuales son las instrucciones que los generan y en qué
etapas del pipeline aparecen.
d) Modificar el programa agregando la instrucción mul.d f1, f2, f1 entre las instrucciones add.d y mul.d.
Repetir la ejecución y observar los resultados. ¿Por qué aparece un atasco tipo WAR?
e) Explicar por qué colocando un NOP antes de la suma, se soluciona el RAW de la instrucción ADD y como
consecuencia se elimina el WAR. 

a) cantidad de ciclos 16, cantidad de instrucciones 7 y el cpi 2,286 .
b) se generan 4 atascos de dependencia de datos (raw),el comflicto se genera al momento de querer guardar los valores calculados, y estos no se terminaron de calcular, en las lineas que se encuentran estos problemas son:  s.d f3, res1(r0) // s.d f4, res2(r0).pero el problema es que en el de f3 hace una suma que esta tarda 4 ciclos y el problema en el de f4 es que hace una multiplicacion que tarda 7 ciclos,y cuando queremos guardar sus respectivos resultados no terminaron de pasar los ciclos que necesitaba cada instruccion. 
c) los atascos estructurales se producen ya que en lo que es estructural tiene como regla que lo primero que entro al cause es lo primero que sale, y en este ejercicio entra primero la suma que utiliza 4 ciclos y luego la multiplicacion que lleva 7, luego entra una intruccion de proposito general que tarda solamente un ciclo y esta tiene que esperar a que las ingresadas antes que esta terminen y pasen a memoria para luego poder ingresar esta, en este caso se produce por que espera a que termine la suma y la multiplicacion,los generan add.d f3, f2, f1 // mul.d f4, f2, f1.
d) aparece ese tipo de atasco ya que en una instruccion anterior se modifica el valor de uno de los registros a utilizar en la suma y no le da tiempo a que se lo llegue a cargar y arranca la suma con el valor que tenia el registro antes de modificarse.
e) al colocar el nop le da tiempo a cambiar el valor del registro, y cuando haga la suma la hace con el valor actualizado y no se le actualiza mientras la esta haciendo.
